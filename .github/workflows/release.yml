name: release
on:
  workflow_dispatch:
    inputs:
      version:
        description: The version to release - e.g. v1.2.3
        required: true
        type: string
jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
    steps:
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: ${{ github.event.inputs.version }}

  build-release:
    name: Build Release
    needs:
      - create-release
    runs-on: ${{ matrix.os }}
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS: ""
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [ linux, linux-arm, macos, win-msvc, win-gnu, win32-msvc ]
        include:
          - build: linux
            os: ubuntu-18.04
            rust: nightly
            target: x86_64-unknown-linux-musl
          - build: linux-arm
            os: ubuntu-18.04
            rust: nightly
            target: arm-unknown-linux-gnueabihf
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
          - build: win-msvc
            os: windows-2019
            rust: nightly
            target: x86_64-pc-windows-msvc
          - build: win-gnu
            os: windows-2019
            rust: nightly-x86_64-gnu
            target: x86_64-pc-windows-gnu
          - build: win32-msvc
            os: windows-2019
            rust: nightly
            target: i686-pc-windows-msvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Install packages (Ubuntu)
        if: matrix.os == 'ubuntu-18.04'
        run: |
          ci/ubuntu-install-packages
      - name: Install packages (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          ci/macos-install-packages
      - name: Install Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Use Cross
        shell: bash
        run: |
          cargo install cross
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV
      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"
      - name: Build release binary
        run: ${{ env.CARGO }} build --release ${{ env.TARGET_FLAGS }}

#      - name: Build archive
#        shell: bash
#        run: |
#          outdir="$(ci/cargo-out-dir "${{ env.TARGET_DIR }}")"
#          staging="jiggle-${{ github.event.inputs.version }}-${{ matrix.target }}"
#          mkdir -p "$staging"/{complete,doc}
#          cp {README.md,COPYING,UNLICENSE,LICENSE-MIT} "$staging/"
#          cp {CHANGELOG.md,FAQ.md,GUIDE.md} "$staging/doc/"
#          cp "$outdir"/{jiggle.bash,jiggle.fish,_jiggle.ps1} "$staging/complete/"
#          cp complete/_jiggle "$staging/complete/"
#          if [ "${{ matrix.os }}" = "windows-2019" ]; then
#            cp "target/${{ matrix.target }}/release/jiggle.exe" "$staging/"
#            7z a "$staging.zip" "$staging"
#            echo "ASSET=$staging.zip" >> $GITHUB_ENV
#          else
#            # The man page is only generated on Unix systems. ¯\_(ツ)_/¯
#            cp "$outdir"/jiggle.1 "$staging/doc/"
#            cp "target/${{ matrix.target }}/release/jiggle" "$staging/"
#            tar czf "$staging.tar.gz" "$staging"
#            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
#          fi
      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          asset_content_type: application/octet-stream
